#!/bin/bash

# Pre-preparation script which sets up the appropriate local<->remote hoohar
# and then calls tmux-vim. Still a WIP.
#
# Settings:
#   TMUX_SERVER_USER - username on tmux server machine
#   TMUX_SERVER_PATH - path to tmux on tmux server

# TODO: come up with some unambiguous terms for local/remote hosts
# TODO: consistent naming for the environment variables

export TMUX_SERVER_PATH=${TMUX_SERVER_PATH:-tmux}

# Determine the host the tmux server is running on.
TMUX_SERVER_IP=$( echo $SSH_CONNECTION | cut -d' ' -f1 )
export TMUX_SERVER_HOST=${TMUX_SERVER_USER:-$USER}@$TMUX_SERVER_IP

# Determine the host the we've ssh'ed into.
TMUX_LOCAL_USER=$USER
TMUX_LOCAL_IP=$( echo $SSH_CONNECTION | cut -d' ' -f3 )
export TMUX_LOCAL_HOST=$TMUX_LOCAL_USER@$TMUX_LOCAL_IP

# This needs to be set to fool the tmux-vim pre-flight checks
export TMUX=1

# We need to quote the tmux args before passing them through to ssh, so use
# this function rather than the bare ssh invocation.
_tmux_remote() {
    ssh $TMUX_SERVER_HOST $TMUX_SERVER_PATH $( printf '%q ' "$@" )
}
export -f _tmux_remote

# ... and tell tmux-vim to use that function as our tmux binary
export TMUX_VIM_TMUX_BIN=_tmux_remote

# The vim command doesn't need the escaping, but it does need to change to
# our cwd beforehand.
export TMUX_VIM_VIM_BIN="ssh -t $TMUX_LOCAL_HOST cd $PWD \\; vim"

# TMUX_PANE isn't set on the remote host, but we can work it out.
export TMUX_PANE=$( \
    _tmux_remote lsp -F '#{pane_active}:#{pane_id}' | grep ^1: | cut -d: -f2 )

# Now call the original tmux-vim script.
tmux-vim "$@"
