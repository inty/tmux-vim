#!/bin/bash

#------------------------------------------------------------------------------
# tmux-vim
#
# Persistent vim panes within tmux.
#
# Usage:
#
#   tmux-vim [file [files...]]
#
# Configuration:
#
#   TMUX_VIM_CONFIG - path to config file, defaults to ~/.tmux-vim.conf
#
#   TMUX_VIM_VIM_ARGS - command-line args to pass to vim (default none)
#   TMUX_VIM_VIM_BIN  - executable to use for vim (default vim)
#   TMUX_VIM_VIM_WINDOW_COUNT - how many vim panes to create
#
#   TMUX_VIM_VIM_WINDOW_SPLIT - if set, vim window is autosplit into panes
#
# If TMUX_VIM_VIM_WINDOW_COUNT is not set, then it will be set as large as
# possible while keeping the shell pane width at least TMUX_VIM_SHELL_WIDTH
# (default 132)
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# Copyright (c) 2012, Stephen Thirlwall
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# * Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
# * The name of Stephen Thirlwall may not be used to endorse or promote products
#   derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL STEPHEN THIRLWALL BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#------------------------------------------------------------------------------

_die() {
    echo "$@" 2>&1
    exit 1
}

_tmux_window_id() {
    tmux lsp -a -F '#{pane_id}=#{window_index}' | grep ^$TMUX_PANE= | cut -d= -f2
}

# _tmux_store key value
# - stores key/value pair in tmux environment
# - appends window id to key so this is a per-window setting
# - much thanks to Romain Francoise for help with this!
_tmux_store() {
    tmux set-environment "${1}_$( _tmux_window_id )" "$2"
}

# _tmux_fetch key
# - retrieves value from tmux environment
# - appends window id to key so this is a per-window setting
# - much thanks to Romain Francoise for help with this!
_tmux_fetch() {
    tmux show-environment | grep "^${1}_$( _tmux_window_id )=" | cut -d= -f2-
}

_tmux_fetch_or_store() {
    if [[ $# -gt 1 ]]; then
        _tmux_store "$@"
    else
        _tmux_fetch "$@"
    fi
}

# _tmux_pane_size width|height
# - gets height or width of current pane
_tmux_pane_size() {
    tmux lsp -F "#{pane_id}=#{pane_$1}" | grep ^$TMUX_PANE= | cut -d= -f2
}

# _vim_pane_id [id]
# - fetch or store the id for the vim pane
_vim_pane_id() {
    _tmux_fetch_or_store tmux_vim_pane "$@"
}

_vim_last_dir() {
    _tmux_fetch_or_store tmux_vim_last_dir "$@"
}

# _vim_send_keys [keystrokes...]
# - sends keystrokes to the vim instance created by tmux_vim
# - keystroke syntax is the same as tmux send-keys
_vim_send_keys() {
    tmux send-keys -t $( _vim_pane_id ) "$@"
}

_tmux_is_running() {
    local pane_id=$( _vim_pane_id )
    [[ -n $pane_id ]] && tmux lsp -F '#{pane_id}' | grep -q ^$pane_id$
}

# _tmux_version
# - return the current tmux version
# - only works for tmux >= 1.5 (but we already checked that)
_tmux_version() {
    tmux -V | cut -d' ' -f2
}

# _pre_flight_checks
# - make sure all requirements are okay before continuing
_pre_flight_checks() {
    # Check that tmux is actually running
    if [[ -z "$TMUX" ]]; then
        _die tmux session not detected
    fi

    # Check that tmux supports the -V command (>= v1.5)
    if ! tmux -V 1>/dev/null 2>/dev/null ; then
        _die tmux 1.6 or greater is required
    fi

    # Check tmux is v1.6 or greater
    if [[ $( _tmux_version ) < 1.6 ]]; then
        _die tmux 1.6 or greater is required
    fi

    return 0
}

# _vim_op <op> <file>
# - does _vim_send_keys :$op space $file
# - escapes spaces correctly in $file
_vim_op() {
    # Backslash escape all spaces in the file name
    _vim_send_keys :$1 space "${2// /\\ }" enter
}

# _vim_start
# - split a new tmux pane and start vim in it
# - the pane id is stored as tmux_vim_pane
_vim_start() {
    if _tmux_is_running; then
        # tmux_vim already exists - try to select that pane
        tmux select-pane -t $( _vim_pane_id ) && return

        # If we get here, that pane no longer exists, so fall thru
        # (shouldn't happen)
    fi

    local vim_args=$TMUX_VIM_VIM_ARGS

    local layout_mode=$( echo $TMUX_VIM_LAYOUT | cut -d: -f1 )
    if [[ $TMUX_VIM_LAYOUT =~ ':' ]]; then
        local layout_args=$( echo $TMUX_VIM_LAYOUT | cut -d: -f2 )
    fi

    #   +----------------+--------------+
    #   |                #              |
    #   |                #              |
    #   |                #              |
    #   +----------------+--------------+
    #
    #                    |- split size -|
    #   |- shell width -| |- vim width -|
    #   |- window width ----------------|
    #
    #   ww = window width
    #   sw = shell width
    #   vw = vim width
    #   vc = vim sub-window count
    #
    # ww = sw + (vc * (vw + 1))
    # sw = ww - (vc * (vw + 1))
    # vw = (ww - sw) / vc - 1
    # vc = (ww - sw) / (vw + 1)
    #
    # Note:
    #   1 column border between shell & vim
    #   1 column border between vim sub-windows
    #   split-size = ww - sw - 1
    #              = vc * (vw + 1) - 1

    # Something like?
    # TMUX_VIM_LAYOUT=shell-width:80
    # TMUX_VIM_LAYOUT=shell-height:15
    # TMUX_VIM_LAYOUT=vim-width:132
    # TMUX_VIM_LAYOUT=vim-width:80x2
    # TMUX_VIM_LAYOUT=vim-width:80x*
    # TMUX_VIM_LAYOUT=vim-height:80

    case $layout_mode in

    shell-width|'')
        local ww=$( _tmux_pane_size width )
        local sw=${layout_args:-132}

        local split_method='h'
        local split_size=$[ $ww - $sw - 1 ]
        ;;

    shell-height)
        local split_method='v'
        local split_size=${split_args:-15}
        ;;

    vim-width)
        layout_args=${layout_args:-80}
        local ww=$( _tmux_pane_size width )
        local vc=1
        local vw=$layout_args
        if [[ $layout_args =~ 'x' ]]; then
            vw=$( echo $layout_args | cut -dx -f1 )
            vc=$( echo $layout_args | cut -dx -f2 )
        fi
        if [[ $vc == '*' ]]; then
            local sw=80 #TODO: how to specify this?
            vc=$[ ($ww - $sw) / ($vw + 1) ]
            [[ $vc == 0 ]] && vc=1
        fi
        [[ -n "$TMUX_VIM_VIM_WINDOW_SPLIT" ]] && vim_args+=" -O$vc"

        local split_method='h'
        local split_size=$[ $vc * ($vw + 1) - 1 ]
        ;;

    vim-height)
        local wh=$( _tmux_pane_size height )
        local vh=${layout_args}

        local split_method='v'
        local split_size=$[ $wh - $vh - 1]
        ;;

    *)
        _die Unknown TMUX_VIM_LAYOUT="$TMUX_VIM_LAYOUT"
        ;;

    esac

    local vim_bin=${TMUX_VIM_VIM_BIN:-vim}

    # Split a new pane, start vim in it, and record the pane index
    local tmux_vim_pane=$(tmux split-window -P -$split_method -l $split_size \
                        "exec $vim_bin $vim_args")

    # Now convert the pane index into a global persistent id
    # 0:1.1: [100x88] [history 0/10000, 0 bytes] %2
    # ^^^^^ $tmux_vim_pane              pane_id  ^^
    _vim_pane_id $(tmux lsp -a | grep ^$tmux_vim_pane: | grep -o '%[0-9]\+')
    _vim_last_dir "$PWD"

    # Swap the pane if we split vertically - tmux puts the new one on the bottom,
    # but we want it on top.
    [[ $split_method == 'v' ]] && tmux swap-pane -D
}

# tmux_vim [files...]
# - if no existing tmux_vim instance is running, a new one is spawned
# - opens the listed files inside the tmux_vim instance
tmux_vim() {
    local rcfile=${TMUX_VIM_CONFIG:-"$HOME/.tmux-vim.conf"}
    [[ -f "$rcfile" ]] && source "$rcfile"

    _pre_flight_checks || exit 1
    _vim_start
    _vim_send_keys escape  # make sure we're in command mode

    if [[ $# -gt 0 ]]; then

        # If we are now in a different directory than $TDIR, we want to make
        # vim switch to this directory temporarily before opening the files.
        # This obviates any relative path computations.
        [[ "$PWD" != "$( _vim_last_dir )" ]] && _vim_op cd "$PWD"

        # Rather than :edit each file in turn, :badd each file into a new
        # buffer, and then finally switch to the last one with :buffer.
        # This is to handle the situation where the current buffer is unsaved,
        # and an :edit command will cause vim to prompt the user to save,
        # abandon or cancel.
        # If we just :edit each file, things just don't work out naturally;
        # cancel works, but yes/no end up with only the first file opened.
        # Errant escape keys cause the whole open to just silently fail.
        # This approach pushes the user interaction right to the end.
        for file in "$@"; do
            _vim_op badd "$file"   # load a buffer for each file
        done

        [[ "$PWD" != "$( _vim_last_dir )" ]] && _vim_op cd -

        _vim_op blast              # switch to the final file
    fi

    tmux select-pane -t $( _vim_pane_id )
}

tmux_vim "$@"

